$(document).ready(function () {
  var currentControl;

  // Make controls draggable
  $(".control").draggable({
    helper: "clone",
  });

  // Make workspace droppable
  $(".workspace, .tab-container, #droppable-area").droppable({
    greedy: true,
    drop: function (event, ui) {
      var elementType = ui.helper.data("type");
      var element;

      switch (elementType) {
        case "button":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<button>")
                .addClass("btn btn-primary draggable")
                .text("Button")
                .attr("type", "button")
                .on("click", function (event) {
                  event.preventDefault(); // Prevent default behavior of button click
                })
            );
          break;

        case "input":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<label>")
                .attr("for", "input-" + Math.random())
                .text("Input Label"),
              $("<input>")
                .addClass("form-control draggable")
                .attr("type", "text")
                .attr("placeholder", "Input Placeholder")
            );
          break;

        case "textarea":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<label>")
                .attr("for", "textarea-" + Math.random())
                .text("Textarea Label"),
              $("<textarea>")
                .addClass("form-control draggable")
                .attr("placeholder", "Textarea Placeholder")
            );
          break;

        case "checkbox":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<div>")
                .addClass("form-check")
                .append(
                  $("<input>")
                    .addClass("form-check-input draggable")
                    .attr("type", "checkbox")
                    .attr("id", "checkbox-" + Math.random()),
                  $("<label>")
                    .addClass("form-check-label")
                    .attr("for", "checkbox-" + Math.random())
                    .text("Checkbox Label")
                )
            );
          break;

        case "radio":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<div>")
                .addClass("form-check")
                .append(
                  $("<input>")
                    .addClass("form-check-input draggable")
                    .attr("type", "radio")
                    .attr("id", "radio-" + Math.random()),
                  $("<label>")
                    .addClass("form-check-label")
                    .attr("for", "radio-" + Math.random())
                    .text("Radio Label")
                )
            );
          break;

        case "dropdown":
          element = $("<div>")
            .addClass("form-group")
            .append(
              $("<label>")
                .addClass("form-label")
                .attr("for", "dropdown-" + Math.random())
                .text("Dropdown Label"),
              $("<select>")
                .addClass("form-control draggable dropdown-select")
                .attr("id", "dropdown-" + Math.random())
            );
          break;

        case "tabbedControl":
          // Implementation for tabbed control (not provided in your code)
          addTabbedControl(this);
          break;

        // Add more cases for other controls as needed
      }

      if (element) {
        element.find(".draggable").on("click", function (event) {
          currentControl = $(this);
          showPropertyPane();
        });
        $(this).find("#form").append(element);
      }
    },
  });

  // Make form sortable
  $(".sortable").sortable({
    update: function (event, ui) {
      currentControl = $(ui.item).find(".draggable");
      showPropertyPane();
    },
  });

  // Property editor functionality
  $("#applyButton").on("click", function () {
    var controlText = $("#controlText").val();
    var controlPlaceholder = $("#controlPlaceholder").val();
    var controlLabel = $("#controlLabel").val();
    var controlTextareaLabel = $("#controlTextareaLabel").val();

    if (currentControl) {
      currentControl.attr("placeholder", controlPlaceholder);
      if (currentControl.prop("tagName").toLowerCase() === "textarea") {
        var labelElement = currentControl.parent().find("label");
        labelElement.text(controlTextareaLabel);
      } else if (currentControl.prop("tagName").toLowerCase() === "input") {
        var labelElement = currentControl.parent().find("label");
        labelElement.text(controlLabel);
      } else if (currentControl.hasClass("dropdown-select")) {
        var labelElement = currentControl.parent().find("label");
        labelElement.text(controlLabel);

        var selectedDataType = $("#dataType").val();
        if (selectedDataType === "static") {
          var staticValues = $("#staticValuesInput").val().split(",");
          populateDropdown(currentControl, staticValues);
        } else if (selectedDataType === "api") {
          var apiUrl = $("#apiUrl").val();
          populateDropdownFromAPI(currentControl, apiUrl);
        }
      }
      hidePropertyPane();
    }
  });

  // Function to show the property pane
  function showPropertyPane() {
    $("#propertySidebar").show();

    var controlText = currentControl.text();
    var controlPlaceholder = currentControl.attr("placeholder");
    var controlLabel = currentControl.parent().find("label").text();
    var controlTextareaLabel = currentControl.parent().find("label").text();

    var propertyPaneContent;
    switch (currentControl.prop("tagName").toLowerCase()) {
      case "button":
        propertyPaneContent =
          '<div class="mb-3"><label for="controlText" class="form-label">Button Text:</label>' +
          '<input type="text" id="controlText" class="form-control" value="' +
          controlText +
          '"></div>' +
          '<div class="mb-3"><label for="controlLabel" class="form-label">Button Label:</label>' +
          '<input type="text" id="controlLabel" class="form-control" value="' +
          controlLabel +
          '"></div>';
        break;

      case "input":
        propertyPaneContent =
          '<div class="mb-3"><label for="controlPlaceholder" class="form-label">Input Placeholder:</label>' +
          '<input type="text" id="controlPlaceholder" class="form-control" value="' +
          controlPlaceholder +
          '"></div>' +
          '<div class="mb-3"><label for="controlInputLabel" class="form-label">Input Label:</label>' +
          '<input type="text" id="controlInputLabel" class="form-control" value="' +
          controlLabel +
          '"></div>';
        break;

      case "textarea":
        propertyPaneContent =
          '<div class="mb-3"><label for="controlPlaceholder" class="form-label">Textarea Placeholder:</label>' +
          '<input type="text" id="controlPlaceholder" class="form-control" value="' +
          controlPlaceholder +
          '"></div>' +
          '<div class="mb-3"><label for="controlTextareaLabel" class="form-label">Textarea Label:</label>' +
          '<input type="text" id="controlTextareaLabel" class="form-control" value="' +
          controlTextareaLabel +
          '"></div>';
        break;

      case "select":
        propertyPaneContent =
          '<div class="mb-3"><label for="controlLabel" class="form-label">Dropdown Label:</label>' +
          '<input type="text" id="controlLabel" class="form-control" value="' +
          controlLabel +
          '"></div>' +
          '<select id="dataType" class="form-select mb-3">' +
          '<option value="static">Static Values</option>' +
          '<option value="api">API Call</option>' +
          "</select>" +
          '<div id="staticValues" class="mb-3">' +
          '<label for="staticValuesInput" class="form-label">Static Values:</label>' +
          '<input type="text" id="staticValuesInput" class="form-control" placeholder="Enter comma-separated values">' +
          "</div>" +
          '<div id="apiFields" style="display: none;">' +
          '<label for="apiUrl" class="form-label">API URL:</label>' +
          '<input type="text" id="apiUrl" class="form-control" placeholder="Enter API endpoint">' +
          '<div id="displayMemberField" class="mb-3">' +
          '<label for="displayMemberInput" class="form-label">Display Member:</label>' +
          '<input type="text" id="displayMemberInput" class="form-control" placeholder="Enter API response property for display">' +
          "</div>" +
          '<div id="valueMemberField" class="mb-3">' +
          '<label for="valueMemberInput" class="form-label">Value Member:</label>' +
          '<input type="text" id="valueMemberInput" class="form-control" placeholder="Enter API response property for value">' +
          "</div>" +
          "</div>";
        break;

      // Add more cases for other controls as needed
      default:
        propertyPaneContent = "";
        break;
    }

    $("#propertyPane").html(propertyPaneContent);

    $("#dataType").change(function () {
      var selectedDataType = $(this).val();
      if (selectedDataType === "static") {
        $("#staticValues").show();
        $("#apiFields").hide();
      } else if (selectedDataType === "api") {
        $("#staticValues").hide();
        $("#apiFields").show();
      }
    });
  }

  // Function to hide the property pane
  function hidePropertyPane() {
    $("#propertySidebar").hide();
  }

  // Function to populate dropdown with values
  function populateDropdown(dropdown, values) {
    dropdown.empty();
    values.forEach(function (value) {
      dropdown.append($("<option>").text(value));
    });
  }

  // Function to populate dropdown options from an API
  function populateDropdownFromAPI(dropdown, apiUrl) {
    var displayMember = $("#displayMemberInput").val();
    var valueMember = $("#valueMemberInput").val();

    $.getJSON(apiUrl, function (data) {
      dropdown.empty();
      data.forEach(function (item) {
        var displayText = item[displayMember];
        var optionValue = item[valueMember];
        dropdown.append($("<option>").val(optionValue).text(displayText));
      });
    });
  }

  // Function to add the tabbed control structure to the workspace
  function addTabbedControl(workspace) {
    var tabbedControl = createTabbedControl();
    $(workspace).append(tabbedControl);
  }

  // Function to add a new tab
  function addTab(tabId, tabTitle) {
    var tabHeader = `<li><span class="ui-icon ui-icon-close" role="presentation"></span><a href="#${tabId}" class="editable-tab">${tabTitle}</a></li>`;
    $("#tab-list").append(tabHeader);
    $("#tabs").append(`<div id="${tabId}">Content for ${tabTitle}</div>`);
    $("#tabs").tabs("refresh");
  }

  // Make droppable area accept draggable elements
  $("#ui-tabs-panel").droppable({
    accept: ".draggable",
    drop: function (event, ui) {
      $(this).append(ui.draggable.clone()); // Append a clone of the dropped element
    },
  });

  // Example: Make elements draggable
  $(".draggable").draggable({
    revert: "invalid", // Revert the draggable if not dropped on a valid droppable target
    helper: "clone", // Use a clone of the original draggable for the drag operation
  });

  // Function to create the tabbed control structure
  function createTabbedControl() {
    var tabControl = $("<div>")
      .attr("id", "tabs")
      .addClass("ui-tabs ui-corner-all ui-widget ui-widget-content");
    var tabList = $("<ul>")
      .attr("id", "tab-list")
      .addClass(
        "ui-tabs-nav ui-corner-all ui-helper-reset ui-helper-clearfix ui-widget-header"
      );
    var addTabButton = $("<button>").attr("id", "add-tab-btn").text("Add Tab");
    var droppableArea = $("<div>")
      .attr("id", "droppable-area")
      .addClass("ui-droppable")
      .text("Drop other controls here...");

    tabControl.append(tabList, addTabButton, droppableArea);

    // Initialize tabs
    tabControl.tabs();

    // Handle click event on "Add Tab" button
    addTabButton.on("click", function () {
      var newTabId = "tab-" + ($("#tab-list li").length + 1);
      var newTabTitle = "Tab " + ($("#tab-list li").length + 1);
      addTab(newTabId, newTabTitle);
    });

    // Handle click event on close buttons
    tabList.on("click", ".ui-icon-close", function () {
      var tabId = $(this).siblings("a").attr("href").substring(1);
      $("#" + tabId).remove(); // Remove tab content
      $(this).parent().remove(); // Remove tab header
      $("#tabs").tabs("refresh"); // Refresh the tabs widget
    });

    // Handle inline editing of tab title
    tabList.on("dblclick", ".editable-tab", function () {
      var currentTitle = $(this).text();
      var newTitle = prompt("Enter new tab title:", currentTitle);
      if (newTitle && newTitle.trim() !== "") {
        $(this).text(newTitle);
        var tabId = $(this).attr("href").substring(1);
        $("#" + tabId).text("Content for " + newTitle); // Update tab content accordingly
      }
    });

    return tabControl;
  }
  // Property editor functionality
  $("#applyButton").on("click", function (event) {
    event.preventDefault();
    // Get input values from the property pane
    var controlText = $("#controlText").val();
    var controlPlaceholder = $("#controlPlaceholder").val();
    var controlLabel = $("#controlInputLabel").val();
    var controlTextareaLabel = $("#controlTextareaLabel").val();

    // Apply the input values to the current control
    if (currentControl) {
      currentControl.attr("placeholder", controlPlaceholder);
      // Update label if the currentControl is a textarea or input
      if (currentControl.prop("tagName").toLowerCase() === "textarea") {
        var labelElement = currentControl.prev("label");
        labelElement.text(controlTextareaLabel);
      } else if (currentControl.prop("tagName").toLowerCase() === "input") {
        var labelElement = currentControl.prev("label");
        labelElement.text(controlLabel);
      } else if (currentControl.hasClass("dropdown-select")) {
        // Update label for dropdown select
        var labelElement = currentControl.prev("label");
        labelElement.text(controlLabel);
        // Populate dropdown with values
        var selectedDataType = $("#dataType").val();
        if (selectedDataType === "static") {
          var staticValues = $("#staticValuesInput").val().split(",");
          populateDropdown(currentControl, staticValues);
        } else if (selectedDataType === "api") {
          var apiUrl = $("#apiUrl").val();
          var randomNumber = Math.random();
          $.get(apiUrl, function (data) {
            populateDropdownFromAPI(currentControl, data);
          });
        }
      }
      // Hide the property pane
      hidePropertyPane();
    }
  });
});
